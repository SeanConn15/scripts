#!/usr/bin/python3
import os
import logging
from datetime import date
import sys
import email
from email import policy
import re
import base64

## helper functions
def fail():
    logging.critical("Script is done, failed.")
    sys.exit(1)


# set up log file
day = str(date.today().year) + "-" + str(date.today().month) + "-" + str(date.today().day)
filename = "/var/log/torrentmailman/" + day + '_torrentmailman.log';
logging.basicConfig(filename=filename, encoding='utf-8', format='%(asctime)s: %(message)s', level=logging.DEBUG)

logging.debug("Script is being run.")

# load the approved senders list
try:
    senders_file = open("/var/lib/torrentmailman/approved_torrent_requesters", "r")
except (OSError, IOError) as e:
    logging.critical("Could not open approved senders file. Error: \"{}\"".format(str(e)))
    senders_file.close()
    fail()


approved_senders = []
for line in senders_file:
    line = line.rstrip()
    approved_senders.append(line)
senders_file.close()

logging.debug("{} approved senders loaded.".format(len(approved_senders)))

# get the input from postfix
input = ""
for line in sys.stdin:
    input += line

logging.debug(input)

email_contents = email.message_from_string(input, policy=email.policy.default)

# check if the sender is in the approved senders list
sender = email_contents["From"]
sender_email = re.search("<([^<>]*)>$", sender).group(1)

if sender_email not in approved_senders:
    logging.critical("Sender: {} not in approved torrent request list.".format(sender))
    fail()

# check if the subject is torrent
if email_contents["Subject"] != "torrent":
    logging.critical("email recieved with irrelevant subject: \"{}\"".format(email_contents["Subject"]))
    fail()

logging.debug("Valid email request recieved.")

## read the body
email_body = email_contents.get_body(['plain', 'html', 'related'])

# get the content type
email_body_type = email_body.get_content_type()
email_body_encoding = email_body.get("Content-Transfer-Encoding")

if email_body_type != "text/plain":
    logging.critical("message type not recognized.")
    fail()

logging.debug("Link: " + email_body.get_content())

#TODO: link parsing and validation

#TODO: actually download the thing

logging.debug("sending confirmation email")
os.system("echo -e \"Subject:you've done it skipper\nyou've stopped racism\n\" | sendmail {}".format(sender_email))

# get the magnet link
logging.debug("Script is done.")



